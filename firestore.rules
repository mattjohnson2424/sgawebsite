rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
  	///// FUNCTIONS /////
  	function isSignedIn() {
      return request.auth != null;
    }

    function getRole(rsc) {
      return rsc.data.roles[request.auth.uid];
    }

    function isOneOfRoles(rsc, array) {
      return isSignedIn() && (getRole(rsc) in array);
    }

		// Announcements
    match /announcements/{announcementId} {
    	allow read: if isSignedIn();
      allow write: if isSignedIn() && isOneOfRoles(resource, ['owner', 'admin', 'exec']);
    }
    
    // Bios
    match /bios/{bioId} {
    	allow read: if isSignedIn();
      allow write: if isSignedIn() && isOneOfRoles(resource, ['owner', 'admin', 'exec']);
    }
    
    // Calendar
    match /calendar/{calendarId} {
    	allow read: if isSignedIn();
      allow write: if isSignedIn() && isOneOfRoles(resource, ['owner', 'admin']);
    }
    
    // Errors
    match /errors/{errorId} {
    	allow read, write: if false;
    }
    
    // Users
    match /users/{userId} {
    	allow read, write: if false;
    }
    
    // Users
    match /events/{eventId} {
    	allow read: if isSignedIn();
      allow create, delete: if isSignedIn() && isOneOfRoles(resource, ['owner', 'admin', 'exec'])
      allow update: if isSignedIn() && 
      (
      	isOneOfRoles(resource, ['owner', 'admin', 'exec',]) || 
        (isOneOfRoles(resource, ['officer']) && 
        request.resource.data.keys().hasOnly(['attendance/$(userId)/present'])
        )) 
    }
    
    
  }
}